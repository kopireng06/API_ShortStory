// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	categories "api_short_story/business/categories"

	mock "github.com/stretchr/testify/mock"
)

// CategoryRepoInterface is an autogenerated mock type for the CategoryRepoInterface type
type CategoryRepoInterface struct {
	mock.Mock
}

// AddCategory provides a mock function with given fields: category
func (_m *CategoryRepoInterface) AddCategory(category categories.CategoryEntity) (categories.CategoryEntity, error) {
	ret := _m.Called(category)

	var r0 categories.CategoryEntity
	if rf, ok := ret.Get(0).(func(categories.CategoryEntity) categories.CategoryEntity); ok {
		r0 = rf(category)
	} else {
		r0 = ret.Get(0).(categories.CategoryEntity)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(categories.CategoryEntity) error); ok {
		r1 = rf(category)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteCategory provides a mock function with given fields: id
func (_m *CategoryRepoInterface) DeleteCategory(id int) (categories.CategoryEntity, error) {
	ret := _m.Called(id)

	var r0 categories.CategoryEntity
	if rf, ok := ret.Get(0).(func(int) categories.CategoryEntity); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(categories.CategoryEntity)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EditCategory provides a mock function with given fields: id, author
func (_m *CategoryRepoInterface) EditCategory(id int, author categories.CategoryEntity) (categories.CategoryEntity, error) {
	ret := _m.Called(id, author)

	var r0 categories.CategoryEntity
	if rf, ok := ret.Get(0).(func(int, categories.CategoryEntity) categories.CategoryEntity); ok {
		r0 = rf(id, author)
	} else {
		r0 = ret.Get(0).(categories.CategoryEntity)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, categories.CategoryEntity) error); ok {
		r1 = rf(id, author)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllCategories provides a mock function with given fields:
func (_m *CategoryRepoInterface) GetAllCategories() ([]categories.CategoryEntity, error) {
	ret := _m.Called()

	var r0 []categories.CategoryEntity
	if rf, ok := ret.Get(0).(func() []categories.CategoryEntity); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]categories.CategoryEntity)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
