// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	authors "api_short_story/business/authors"

	mock "github.com/stretchr/testify/mock"
)

// AuthorRepoInterface is an autogenerated mock type for the AuthorRepoInterface type
type AuthorRepoInterface struct {
	mock.Mock
}

// AddAuthor provides a mock function with given fields: author
func (_m *AuthorRepoInterface) AddAuthor(author authors.AuthorEntity) (authors.AuthorEntity, error) {
	ret := _m.Called(author)

	var r0 authors.AuthorEntity
	if rf, ok := ret.Get(0).(func(authors.AuthorEntity) authors.AuthorEntity); ok {
		r0 = rf(author)
	} else {
		r0 = ret.Get(0).(authors.AuthorEntity)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(authors.AuthorEntity) error); ok {
		r1 = rf(author)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteAuthor provides a mock function with given fields: id
func (_m *AuthorRepoInterface) DeleteAuthor(id int) (authors.AuthorEntity, error) {
	ret := _m.Called(id)

	var r0 authors.AuthorEntity
	if rf, ok := ret.Get(0).(func(int) authors.AuthorEntity); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(authors.AuthorEntity)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EditAuthor provides a mock function with given fields: id, author
func (_m *AuthorRepoInterface) EditAuthor(id int, author authors.AuthorEntity) (authors.AuthorEntity, error) {
	ret := _m.Called(id, author)

	var r0 authors.AuthorEntity
	if rf, ok := ret.Get(0).(func(int, authors.AuthorEntity) authors.AuthorEntity); ok {
		r0 = rf(id, author)
	} else {
		r0 = ret.Get(0).(authors.AuthorEntity)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, authors.AuthorEntity) error); ok {
		r1 = rf(id, author)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllAuthors provides a mock function with given fields:
func (_m *AuthorRepoInterface) GetAllAuthors() ([]authors.AuthorEntity, error) {
	ret := _m.Called()

	var r0 []authors.AuthorEntity
	if rf, ok := ret.Get(0).(func() []authors.AuthorEntity); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]authors.AuthorEntity)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAuthorById provides a mock function with given fields: id
func (_m *AuthorRepoInterface) GetAuthorById(id int) (authors.AuthorEntity, error) {
	ret := _m.Called(id)

	var r0 authors.AuthorEntity
	if rf, ok := ret.Get(0).(func(int) authors.AuthorEntity); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(authors.AuthorEntity)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAuthorsByName provides a mock function with given fields: name
func (_m *AuthorRepoInterface) GetAuthorsByName(name string) ([]authors.AuthorEntity, error) {
	ret := _m.Called(name)

	var r0 []authors.AuthorEntity
	if rf, ok := ret.Get(0).(func(string) []authors.AuthorEntity); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]authors.AuthorEntity)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Login provides a mock function with given fields: author
func (_m *AuthorRepoInterface) Login(author authors.AuthorEntity) (authors.AuthorEntity, error) {
	ret := _m.Called(author)

	var r0 authors.AuthorEntity
	if rf, ok := ret.Get(0).(func(authors.AuthorEntity) authors.AuthorEntity); ok {
		r0 = rf(author)
	} else {
		r0 = ret.Get(0).(authors.AuthorEntity)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(authors.AuthorEntity) error); ok {
		r1 = rf(author)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
