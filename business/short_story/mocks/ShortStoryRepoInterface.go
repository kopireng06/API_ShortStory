// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	shortstory "api_short_story/business/short_story"

	mock "github.com/stretchr/testify/mock"
)

// ShortStoryRepoInterface is an autogenerated mock type for the ShortStoryRepoInterface type
type ShortStoryRepoInterface struct {
	mock.Mock
}

// AddShortStory provides a mock function with given fields: story
func (_m *ShortStoryRepoInterface) AddShortStory(story shortstory.ShortStoryEntity) (shortstory.ShortStoryEntity, error) {
	ret := _m.Called(story)

	var r0 shortstory.ShortStoryEntity
	if rf, ok := ret.Get(0).(func(shortstory.ShortStoryEntity) shortstory.ShortStoryEntity); ok {
		r0 = rf(story)
	} else {
		r0 = ret.Get(0).(shortstory.ShortStoryEntity)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(shortstory.ShortStoryEntity) error); ok {
		r1 = rf(story)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteShortStory provides a mock function with given fields: id, story
func (_m *ShortStoryRepoInterface) DeleteShortStory(id int, story shortstory.ShortStoryEntity) (shortstory.ShortStoryEntity, error) {
	ret := _m.Called(id, story)

	var r0 shortstory.ShortStoryEntity
	if rf, ok := ret.Get(0).(func(int, shortstory.ShortStoryEntity) shortstory.ShortStoryEntity); ok {
		r0 = rf(id, story)
	} else {
		r0 = ret.Get(0).(shortstory.ShortStoryEntity)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, shortstory.ShortStoryEntity) error); ok {
		r1 = rf(id, story)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EditShortStory provides a mock function with given fields: id, story
func (_m *ShortStoryRepoInterface) EditShortStory(id int, story shortstory.ShortStoryEntity) (shortstory.ShortStoryEntity, error) {
	ret := _m.Called(id, story)

	var r0 shortstory.ShortStoryEntity
	if rf, ok := ret.Get(0).(func(int, shortstory.ShortStoryEntity) shortstory.ShortStoryEntity); ok {
		r0 = rf(id, story)
	} else {
		r0 = ret.Get(0).(shortstory.ShortStoryEntity)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, shortstory.ShortStoryEntity) error); ok {
		r1 = rf(id, story)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetShortStories provides a mock function with given fields: offset, limit
func (_m *ShortStoryRepoInterface) GetShortStories(offset int, limit int) ([]shortstory.ShortStoryEntity, error) {
	ret := _m.Called(offset, limit)

	var r0 []shortstory.ShortStoryEntity
	if rf, ok := ret.Get(0).(func(int, int) []shortstory.ShortStoryEntity); ok {
		r0 = rf(offset, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]shortstory.ShortStoryEntity)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(offset, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetShortStoriesByIdAuthor provides a mock function with given fields: id
func (_m *ShortStoryRepoInterface) GetShortStoriesByIdAuthor(id int) ([]shortstory.ShortStoryEntity, error) {
	ret := _m.Called(id)

	var r0 []shortstory.ShortStoryEntity
	if rf, ok := ret.Get(0).(func(int) []shortstory.ShortStoryEntity); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]shortstory.ShortStoryEntity)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetShortStoriesByIdCategory provides a mock function with given fields: id
func (_m *ShortStoryRepoInterface) GetShortStoriesByIdCategory(id int) ([]shortstory.ShortStoryEntity, error) {
	ret := _m.Called(id)

	var r0 []shortstory.ShortStoryEntity
	if rf, ok := ret.Get(0).(func(int) []shortstory.ShortStoryEntity); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]shortstory.ShortStoryEntity)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetShortStoriesByTitle provides a mock function with given fields: title
func (_m *ShortStoryRepoInterface) GetShortStoriesByTitle(title string) ([]shortstory.ShortStoryEntity, error) {
	ret := _m.Called(title)

	var r0 []shortstory.ShortStoryEntity
	if rf, ok := ret.Get(0).(func(string) []shortstory.ShortStoryEntity); ok {
		r0 = rf(title)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]shortstory.ShortStoryEntity)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(title)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetShortStoryById provides a mock function with given fields: id
func (_m *ShortStoryRepoInterface) GetShortStoryById(id int) (shortstory.ShortStoryEntity, error) {
	ret := _m.Called(id)

	var r0 shortstory.ShortStoryEntity
	if rf, ok := ret.Get(0).(func(int) shortstory.ShortStoryEntity); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(shortstory.ShortStoryEntity)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
